{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Henri\\\\Desktop\\\\Projektit\\\\Koodilukko\\\\koodilukko\\\\src\\\\components\\\\Codelock.js\",\n    _s = $RefreshSig$();\n\nimport './Codelock.css';\nimport { useState } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Codelock = _ref => {\n  _s();\n\n  let {\n    setIsOpen\n  } = _ref;\n  const [buttons, setButtons] = useState([]);\n  const [input, setInput] = useState([]);\n\n  const generateNumPad = () => {\n    // if numpad has been already generated\n    if (buttons.length > 1) {\n      return;\n    }\n\n    for (let i = 0; i < 10; i++) {\n      buttons.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 58\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 26\n      }, this));\n    } // Handles moving \"0\" button to the end of the number pad component (was in the example this way).\n    // FYI: array.shift() moves first item in array to be the last item in the array.\n\n\n    buttons.push(buttons.shift());\n  };\n\n  generateNumPad();\n\n  const handleInput = pressedBtn => {\n    let tempInputArr = input;\n    tempInputArr.push(pressedBtn);\n    setInput(tempInputArr); // Handles resetting the code if 4 digits have been set. \n\n    if (input.length === 4) {\n      checkCode(tempInputArr.join(\"\"));\n      setInput([]);\n    }\n  };\n\n  const checkCode = async inputCode => {\n    axios.get(\"http://localhost:3001/checkCode\", {\n      params: {\n        inputCode\n      }\n    }).then(response => {\n      if (inputCode == response.data[0].passcode) {\n        console.log(\"CODE CORRECT!\");\n        setIsOpen(true);\n      } else {\n        console.log(\"incorrect code.\");\n        setIsOpen(false);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codelock-container\",\n    children: [// How array.map works and more: https://reactjs.org/docs/lists-and-keys.html\n    buttons.map((item, id) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleInput(id + 1),\n        children: item\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Codelock, \"p+5S4P8GgAk4iVjBXg1uEQI9b6o=\");\n\n_c = Codelock;\nexport default Codelock;\n\nvar _c;\n\n$RefreshReg$(_c, \"Codelock\");","map":{"version":3,"names":["useState","axios","Codelock","setIsOpen","buttons","setButtons","input","setInput","generateNumPad","length","i","push","shift","handleInput","pressedBtn","tempInputArr","checkCode","join","inputCode","get","params","then","response","data","passcode","console","log","map","item","id"],"sources":["C:/Users/Henri/Desktop/Projektit/Koodilukko/koodilukko/src/components/Codelock.js"],"sourcesContent":["import './Codelock.css';\r\nimport { useState } from 'react';\r\nimport axios from \"axios\";\r\n\r\nconst Codelock = ({ setIsOpen }) => {\r\n    const [buttons, setButtons] = useState([]);\r\n    const [input, setInput] = useState([]);\r\n\r\n    const generateNumPad = () => {\r\n        // if numpad has been already generated\r\n        if (buttons.length > 1) {\r\n            return\r\n        }\r\n        for (let i = 0; i < 10; i++) {\r\n            buttons.push(<div className=\"button\" key={i}><p>{i}</p></div>)\r\n        }\r\n        // Handles moving \"0\" button to the end of the number pad component (was in the example this way).\r\n        // FYI: array.shift() moves first item in array to be the last item in the array.\r\n        buttons.push(buttons.shift());\r\n    }\r\n    generateNumPad();\r\n\r\n    const handleInput = (pressedBtn) => {\r\n        let tempInputArr = input;\r\n        tempInputArr.push(pressedBtn);\r\n        setInput(tempInputArr)\r\n\r\n        // Handles resetting the code if 4 digits have been set. \r\n        if ((input.length) === 4) {\r\n            checkCode(tempInputArr.join(\"\"))\r\n            setInput([])\r\n        }\r\n    }\r\n\r\n    const checkCode = async (inputCode) => {\r\n        axios.get(\"http://localhost:3001/checkCode\", { params: { inputCode } }).then((response) => {\r\n            if (inputCode == response.data[0].passcode) {\r\n                console.log(\"CODE CORRECT!\")\r\n                setIsOpen(true);\r\n            }\r\n            else {\r\n                console.log(\"incorrect code.\")\r\n                setIsOpen(false);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"codelock-container\">\r\n            {\r\n                // How array.map works and more: https://reactjs.org/docs/lists-and-keys.html\r\n                buttons.map((item, id) => {\r\n                    return (\r\n                        <div key={id} onClick={() => handleInput((id + 1))}>\r\n                            {item}\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            <div>{input}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Codelock"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,QAAQ,GAAG,QAAmB;EAAA;;EAAA,IAAlB;IAAEC;EAAF,CAAkB;EAChC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;;EAEA,MAAMQ,cAAc,GAAG,MAAM;IACzB;IACA,IAAIJ,OAAO,CAACK,MAAR,GAAiB,CAArB,EAAwB;MACpB;IACH;;IACD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;MACzBN,OAAO,CAACO,IAAR,eAAa;QAAK,SAAS,EAAC,QAAf;QAAA,uBAAgC;UAAA,UAAID;QAAJ;UAAA;UAAA;UAAA;QAAA;MAAhC,GAA6BA,CAA7B;QAAA;QAAA;QAAA;MAAA,QAAb;IACH,CAPwB,CAQzB;IACA;;;IACAN,OAAO,CAACO,IAAR,CAAaP,OAAO,CAACQ,KAAR,EAAb;EACH,CAXD;;EAYAJ,cAAc;;EAEd,MAAMK,WAAW,GAAIC,UAAD,IAAgB;IAChC,IAAIC,YAAY,GAAGT,KAAnB;IACAS,YAAY,CAACJ,IAAb,CAAkBG,UAAlB;IACAP,QAAQ,CAACQ,YAAD,CAAR,CAHgC,CAKhC;;IACA,IAAKT,KAAK,CAACG,MAAP,KAAmB,CAAvB,EAA0B;MACtBO,SAAS,CAACD,YAAY,CAACE,IAAb,CAAkB,EAAlB,CAAD,CAAT;MACAV,QAAQ,CAAC,EAAD,CAAR;IACH;EACJ,CAVD;;EAYA,MAAMS,SAAS,GAAG,MAAOE,SAAP,IAAqB;IACnCjB,KAAK,CAACkB,GAAN,CAAU,iCAAV,EAA6C;MAAEC,MAAM,EAAE;QAAEF;MAAF;IAAV,CAA7C,EAAwEG,IAAxE,CAA8EC,QAAD,IAAc;MACvF,IAAIJ,SAAS,IAAII,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBC,QAAlC,EAA4C;QACxCC,OAAO,CAACC,GAAR,CAAY,eAAZ;QACAvB,SAAS,CAAC,IAAD,CAAT;MACH,CAHD,MAIK;QACDsB,OAAO,CAACC,GAAR,CAAY,iBAAZ;QACAvB,SAAS,CAAC,KAAD,CAAT;MACH;IACJ,CATD;EAUH,CAXD;;EAaA,oBACI;IAAK,SAAS,EAAC,oBAAf;IAAA,WAEQ;IACAC,OAAO,CAACuB,GAAR,CAAY,CAACC,IAAD,EAAOC,EAAP,KAAc;MACtB,oBACI;QAAc,OAAO,EAAE,MAAMhB,WAAW,CAAEgB,EAAE,GAAG,CAAP,CAAxC;QAAA,UACKD;MADL,GAAUC,EAAV;QAAA;QAAA;QAAA;MAAA,QADJ;IAKH,CAND,CAHR,eAWI;MAAA,UAAMvB;IAAN;MAAA;MAAA;MAAA;IAAA,QAXJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAeH,CA1DD;;GAAMJ,Q;;KAAAA,Q;AA4DN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}